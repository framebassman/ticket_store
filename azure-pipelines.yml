trigger:
  branches:
    include:
    - '*' 
  paths:
    exclude:
    - .circleci/**
    - .github/**
    - .ci/**
    - Deploy/**
    - Docs/**
    - Scripts/**
    - Services/Postgres
    - Services/Proxy
    - .gitignore
    - README.md
    - codecov.yml

pr:
  branches:
    include:
    - '*' 
  paths:
    exclude:
    - .circleci/**
    - .github/**
    - .ci/**
    - Deploy/**
    - Docs/**
    - Scripts/**
    - Services/Postgres
    - Services/Proxy
    - .gitignore
    - README.md
    - codecov.yml

stages:
- stage: Unit_Tests
  jobs:
  - job: Api
    pool:
      vmImage: 'ubuntu-22.04'
    continueOnError: true
    steps:
    - task: UseDotNet@2
      displayName: 'Install Dotnet Core'
      inputs:
        packageType: sdk
        version: 7.0.203
    - script: |
        dotnet test --logger "trx;LogFileName=report.trx" --collect:"XPlat Code Coverage"
      workingDirectory: $(build.sourcesDirectory)/Services/TicketStore.Api.Tests.Unit
      displayName: 'dotnet test'
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: true
    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: 'VSTest' # Options: JUnit, NUnit, VSTest, xUnit, cTest
        testResultsFiles: 'TestResults/report.trx' 
        searchFolder: '$(build.sourcesDirectory)/Services/TicketStore.Api.Tests.Unit' # Optional
    - task: Bash@3
      displayName: 'publish code coverage report to Codecov'
      inputs:
        targetType: 'inline'
        script: bash <(curl -s https://codecov.io/bash)
    - task: PublishCodeCoverageResults@1
      displayName: 'publish code coverage report to Azure Devops'
      inputs:
        codeCoverageTool: 'cobertura' # Options: cobertura, jaCoCo
        summaryFileLocation: $(build.sourcesDirectory)/Services/TicketStore.Api.Tests.Unit/TestResults/**/coverage.cobertura.xml
        #pathToSources: # Optional
        #reportDirectory: # Optional
        #additionalCodeCoverageFiles: # Optional
        #failIfCoverageEmpty: false # Optional

  - job: Web
    pool:
      vmImage: 'ubuntu-22.04'
    continueOnError: true
    steps:
    - task: UseDotNet@2
      displayName: 'Install Dotnet Core'
      inputs:
        packageType: sdk
        version: 7.0.203
    - script: |
        dotnet test --logger "trx;LogFileName=report.trx" --collect:"XPlat Code Coverage"
      workingDirectory: $(build.sourcesDirectory)/Services/TicketStore.Web.Tests.Unit
      displayName: 'dotnet test'
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: true
    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: 'VSTest' # Options: JUnit, NUnit, VSTest, xUnit, cTest
        testResultsFiles: 'TestResults/report.trx' 
        searchFolder: '$(build.sourcesDirectory)/Services/TicketStore.Web.Tests.Unit' # Optional
        #mergeTestResults: false # Optional
        #failTaskOnFailedTests: false # Optional
        #testRunTitle: # Optional
        #buildPlatform: # Optional
        #buildConfiguration: # Optional
        #publishRunAttachments: true # Optional
    - task: Bash@3
      displayName: 'publish code coverage report to Codecov'
      inputs:
        targetType: 'inline'
        script: bash <(curl -s https://codecov.io/bash)
    - task: PublishCodeCoverageResults@1
      displayName: 'publish code coverage report to Azure Devops'
      inputs:
        codeCoverageTool: 'cobertura' # Options: cobertura, jaCoCo
        summaryFileLocation: $(build.sourcesDirectory)/Services/TicketStore.Web.Tests.Unit/TestResults/**/coverage.cobertura.xml
        #pathToSources: # Optional
        #reportDirectory: # Optional
        #additionalCodeCoverageFiles: # Optional
        #failIfCoverageEmpty: false # Optional

  - job: Data
    pool:
      vmImage: 'ubuntu-22.04'
    continueOnError: true
    steps:
    - task: UseDotNet@2
      displayName: 'Install Dotnet Core'
      inputs:
        packageType: sdk
        version: 7.0.203
    - script: |
        dotnet test --logger "trx;LogFileName=report.trx" --collect:"XPlat Code Coverage"
      workingDirectory: $(build.sourcesDirectory)/Services/TicketStore.Data.Tests.Unit
      displayName: 'dotnet test'
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: true
    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: 'VSTest' # Options: JUnit, NUnit, VSTest, xUnit, cTest
        testResultsFiles: 'TestResults/report.trx' 
        searchFolder: '$(build.sourcesDirectory)/Services/TicketStore.Data.Tests.Unit' # Optional
        #mergeTestResults: false # Optional
        #failTaskOnFailedTests: false # Optional
        #testRunTitle: # Optional
        #buildPlatform: # Optional
        #buildConfiguration: # Optional
        #publishRunAttachments: true # Optional
    - task: Bash@3
      displayName: 'publish code coverage report to Codecov'
      inputs:
        targetType: 'inline'
        script: bash <(curl -s https://codecov.io/bash)
    - task: PublishCodeCoverageResults@1
      displayName: 'publish code coverage report to Azure Devops'
      inputs:
        codeCoverageTool: 'cobertura' # Options: cobertura, jaCoCo
        summaryFileLocation: $(build.sourcesDirectory)/Services/TicketStore.Data.Tests.Unit/TestResults/**/coverage.cobertura.xml
        #pathToSources: # Optional
        #reportDirectory: # Optional
        #additionalCodeCoverageFiles: # Optional
        #failIfCoverageEmpty: false # Optional
