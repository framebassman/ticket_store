version: 2.1

orbs:
  codecov: codecov/codecov@3.3.0
jobs:
  client-unit-tests:
    docker:
      - image: node:18.16.0-alpine3.17
    steps:
      - checkout:
          path: ~/repo
      - restore_cache:
          key: npm-cache-v1-{{ checksum "Services/TicketStore.Web/Client/package-lock.json" }}
      - run:
          name: Install libraries
          command: npm --prefix Services/TicketStore.Web/Client ci
      - save_cache:
          key: npm-cache-v1-{{ checksum "Services/TicketStore.Web/Client/package-lock.json" }}
          paths:
            - /home/circleci/.npm
      - run:
          name: Build typescript
          command: npm --prefix Services/TicketStore.Web/Client run build
      - run:
          name: Run tests
          command: npm --prefix Services/TicketStore.Web/Client test
      - run:
          name: Download misc
          command: apk add curl gpg
      - codecov/upload:
          validate: false
          file: './Services/TicketStore.Web/Client/coverage/lcov.info'
      - store_test_results:
          path: ./Services/TicketStore.Web/Client/reports
    # The resource_class feature allows configuring CPU and RAM resources for each job. Different resource classes are available for different executors. https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: large
  release:
    machine:
      docker_layer_caching: false
    steps:
      - checkout
      - run:
          name: Define version
          command: |
            echo 'export VERSION="2.0.$CIRCLE_BUILD_NUM"' >> $BASH_ENV
      - run: bash ./Scripts/publish-to-docker-hub.sh
  deploy:
    machine:
      docker_layer_caching: false
    steps:
      - checkout
      - run:
          name: Define version
          command: |
            echo 'export VERSION="2.0.$CIRCLE_BUILD_NUM"' >> $BASH_ENV
      - run:
          name: Install sentry-cli and verify that cli was installed successfully
          command: |
            curl -sL https://sentry.io/get-cli/ | bash
            sentry-cli --help
      - run:
          name: Create a release in Sentry and associate commits with a release
          command: |
            sentry-cli releases new -p $SENTRY_PROJECT_NAME $VERSION
      - run:
          name: Deploy Over SSH
          command: |
            ssh root@chertopolokh.ru 'rm -rf ticket_store'
            ssh root@chertopolokh.ru 'git clone git@github.com:FrameBassman/ticket_store.git --branch master --single-branch'
            ssh root@chertopolokh.ru 'export VERSION='"'$VERSION'"'; cd ticket_store && make stop-prod start-prod && make docker-cleanup -i'
            ssh root@chertopolokh.ru 'docker image prune --all --force'
      - run:
          name: Deploy check
          command: |
            bash ./Scripts/check-deployment.sh https://chertopolokh.ru
      - run:
          name: Finish sentry release
          command: |
            sentry-cli releases deploys $VERSION new -e Production

workflows:
  version: 2
  frontend-unit-tests-and-deploy:
    jobs:
      - client-unit-tests
      - release:
          filters:
            branches:
              only:
                - master
          context: credentials
          requires:
            - client-unit-tests
      # - deploy:
      #     filters:
      #       branches:
      #         only:
      #           - master
      #     context: credentials
      #     requires:
      #       - release
